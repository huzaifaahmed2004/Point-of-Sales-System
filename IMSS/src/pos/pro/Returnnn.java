package pos.pro;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author huzai
 */
public class Returnnn extends javax.swing.JFrame {
int total=0;
    /**
     * Creates new form Returnnn
     */
    String Inid,poduct,company,size;
    int qty=0;
    public Returnnn(String x) {
        initComponents();
        Inid=x;
        load();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        inid = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Return");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product Name", "Company", "Size", "Quantity", "Unit Price ", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Invoice ID : ");

        inid.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        inid.setText("00");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("dd-MM-yyyy");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Total :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(375, 375, 375)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inid, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(400, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(inid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        int r = jTable1.getSelectedRow();
       int returnedQuantity=0;
       poduct  = (jTable1.getValueAt(r, 0).toString());
        company  = (jTable1.getValueAt(r, 1).toString());
        size  = (jTable1.getValueAt(r, 2).toString());
        qty  = Integer.parseInt(jTable1.getValueAt(r, 3).toString());
        double up=Double.parseDouble(jTable1.getValueAt(r, 4).toString());
        
        String returnedQuantityString = JOptionPane.showInputDialog(null, "Enter Quantity of Product you want to return :", "Return Quantity", JOptionPane.QUESTION_MESSAGE);
      
        double tp=0;
        
        
        
            // Check if the user clicked OK or entered a valid quantity
            if (returnedQuantityString != null && !returnedQuantityString.isEmpty()) {
                
               returnedQuantity = Integer.parseInt(returnedQuantityString);
               tp=up*returnedQuantity;
                if(qty<returnedQuantity){
                   JOptionPane.showMessageDialog(null, "Returning quantity can not be greater then sold quantity", "Error", JOptionPane.ERROR_MESSAGE);

                }else if(returnedQuantity==0){
                  JOptionPane.showMessageDialog(null, "Returning quantity can not be 0", "Error", JOptionPane.ERROR_MESSAGE);

                }else{
                    try {
                      Statement updateStatement = db.mycon().createStatement();
                    //update product
                        updateStatement.executeUpdate("UPDATE products SET pQuantity = pQuantity + " + returnedQuantity + " WHERE pName = '" + poduct + "' AND pCompany = '" + company + "'AND pSize = '" + size + "'");
                        //update cart
                       String updateQuery = "UPDATE cart SET pQuantity = pQuantity - ?, pUPrice =  ?, pTPrice = pTPrice - ? WHERE pName = ? AND pCompany = ? AND pSize = ? AND pQuantity = ?";

PreparedStatement update = db.mycon().prepareStatement(updateQuery);
{
    update.setInt(1, returnedQuantity);  // assuming qty is the quantity to subtract
    update.setDouble(2, up);  // replace newUnitPrice with the actual new unit price
    update.setDouble(3, tp);  // replace newTotalPrice with the actual new total price
    update.setString(4, poduct);
    update.setString(5, company);
    update.setString(6, size);
    update.setInt(7, qty);

    int rowsAffected = update.executeUpdate();
               
                      //update sales
                         
        double Total=0,dis=0,paid=0;
        int Qty=0;
         Statement s = db.mycon().createStatement();         
         ResultSet rs = s.executeQuery("SELECT * FROM sales WHERE INID = " + Inid );
          if (rs.next()) {
             Qty=(rs.getInt("totalQty"));
            Total=(rs.getDouble("totalAmt"));
            
            double discountedAmt=(rs.getDouble("discountedAmt"));
             dis=Total-discountedAmt;
            
            double Remain=(rs.getDouble("Remaining"));
              paid=    discountedAmt+Remain;  
           
              }
          
          
             String que = "UPDATE sales SET totalAmt = ?, totalQty = ?, discountedAmt = ?,Remaining = ? WHERE INID = ? ";

             double tot=Total-tp;
             double discounted=tot-dis;
             int quantity=Qty-returnedQuantity;
             double remaining=paid-discounted;
          
             double dpQ=dis/Qty;
             
             double rm=remaining-dpQ*returnedQuantity;
             if(rm!=0){
                 total+=rm;
            

       remaining=0+dpQ*returnedQuantity;
   
    // Perform actions for "Yes" option
}

remaining-=dpQ*returnedQuantity;
             discounted+=dpQ*quantity;
             
             
             
PreparedStatement updatee = db.mycon().prepareStatement(que);
{
    updatee.setInt(2, quantity);  // assuming qty is the quantity to subtract
    updatee.setDouble(1, tot);  // replace newUnitPrice with the actual new unit price
    updatee.setDouble(3, discounted); 
    updatee.setDouble(4, remaining);
    updatee.setString(5, Inid);

    int rowAffected = updatee.executeUpdate();
                      if (rowAffected > 0) {
        JOptionPane.showMessageDialog(null, "Returned Successfully", "", JOptionPane.INFORMATION_MESSAGE);
load();
    } else {
        // No rows were updated, handle accordingly
    }  
         }
         
       Statement deleteStatement = db.mycon().createStatement();
    String deleteQuery = "DELETE FROM sales WHERE totalQty <= 0";
    String deleteQuery2 = "DELETE FROM cart WHERE pQuantity <= 0";
    int row = deleteStatement.executeUpdate(deleteQuery);
          int rows = deleteStatement.executeUpdate(deleteQuery2);
        
     
                    }} catch (SQLException ex) {
    ex.printStackTrace();
}} 
}
    }//GEN-LAST:event_jTable1MouseClicked

    public void load() {
    try {
        String x=String.valueOf(total);
        jLabel4.setText(x);
        String Datee = "";
        inid.setText(Inid);

        DefaultTableModel dt = (DefaultTableModel) jTable1.getModel();
        dt.setRowCount(0);

        String query = "SELECT * FROM cart WHERE INID LIKE ?";
        try (PreparedStatement preparedStatement = db.mycon().prepareStatement(query)) {
            preparedStatement.setString(1, "%" + Inid + "%");
            ResultSet rs = preparedStatement.executeQuery();

            while (rs.next()) {
                Vector v = new Vector();
                
                v.add(rs.getString("pName"));
                v.add(rs.getString("pCompany"));
                v.add(rs.getString("pSize"));
                
                v.add(rs.getString("pQuantity"));
                v.add(rs.getString("pUPrice"));
                v.add(rs.getString("pTPrice"));
                Datee = rs.getString("Date");
                dt.addRow(v);
            }
          
SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

Date parsedDate = dateFormat.parse(Datee);
jLabel2.setText(dateFormat.format(parsedDate));

        } catch (SQLException e) {
            // Handle the SQLException
            e.printStackTrace();
        }
    } catch (Exception e) {
        // Handle other exceptions
        e.printStackTrace();
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel inid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
